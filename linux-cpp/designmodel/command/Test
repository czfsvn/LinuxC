#include <iostream>

using namespace std;

namespace test_1
{
    // from: https://www.jianshu.com/p/ec970bdcad81
    class Command
    {
    public:
        virtual void execute() = 0;
    };

    class Reciever
    {
    public:
        void    action()    {
            std::cout << "Hello, test_1::Reciever::action\n";
        }
    };

    class ConcreteCommand : public Command
    {
    public:
        ConcreteCommand(Reciever*   rcv)
        {
            reciever_ = rcv;
        }

        virtual void execute()
        {
            reciever_->action();
        }
    private:
        Reciever*       reciever_{nullptr};
        std::string     state_;
    };

    class Invoker
    {
    public:
        void    setCommand(Command* cmd)
        {
            this->command_ = cmd;
        }

        void    runCommand()
        {
            if (command_){
                command_->execute();
            }
        }
    private:
        Command*    command_;
    };

    void    assemble()
    {
        Reciever*   rcv = new Reciever();
        Command*    cmd = new ConcreteCommand(rcv);
        Invoker*    inv = new Invoker();
        inv->setCommand(cmd);
        inv->runCommand();
    }
}

namespace test_2
{
    class MainBoardApi
    {
        public:
            virtual void open() = 0;
            virtual void reset() = 0;
            virtual void close() = 0;
    };

    class GigaMainBoard : public MainBoardApi
    {
        public:
            virtual void open() 
            {
                std::cout << "Giga Main Borad is starting, please wait...\n";
                std::cout << "connecting power...\n";
                std::cout << "check device...\n";
                std::cout << "loading system...\n";
                std::cout << "machine is ready ...\n";
                std::cout << "machine is opened, you can use now\n";
            }

            virtual void reset()
            {
                std::cout << "Giga Main Borad is restarting, please wait...\n";
                std::cout << "machine is opened, you can use now\n";
            }
            virtual void close()
            {
                std::cout << "Giga Main Borad is shutting down, please wait...\n";
                std::cout << "machine is powered off!\n";
            }
    };

    class Command
    {
        public:
            virtual void execute() = 0;
    };

    class OpenCommand : public Command
    {
        public:
            OpenCommand(MainBoardApi* mb) : mainBorad(mb)   {   }
            virtual void execute()
            {
                if (mainBorad)
                    mainBorad->open();
            }
        private:
            MainBoardApi*  mainBorad;
    };
    class ResetCommand : public Command
    {
        public:
            ResetCommand(MainBoardApi* mb) : mainBorad(mb)   {   }
            virtual void execute()
            {
                if (mainBorad)
                    mainBorad->reset();
            }
        private:
            MainBoardApi*  mainBorad;
    };
    class CloseCommand : public Command
    {
        public:
            CloseCommand(MainBoardApi* mb) : mainBorad(mb)   {   }
            virtual void execute()
            {
                if (mainBorad)
                    mainBorad->CloseCommand();
            }
        private:
            MainBoardApi*  mainBorad;
    };
    
    class Box
    {
        public:
            void    setOpenCommand(Command* cmd)    {
                openCommand_ = cmd;
            }
            void    openBtnPressed()            {
                if (openCommand_)
                    openCommand_->execute();
            }

            void    setResetCommand(Command* cmd)   {
                resetCommand_ = cmd;
            }
            void    resetBtnPressed()           {
                if (resetCommand_)
                    resetCommand_->execute();
            }

            void    setCloseCommand(Command* cmd)   {
                closeCommand_ = cmd;
            }
            void    closeBtnPressed()           {
                if (closeCommand_)
                    closeCommand_->execute();
            }

        private:
            Command*    openCommand_;
            Command*    resetCommand_;
            Command*    closeCommand_;
    };

    void    assemble()
    {
        MainBoardApi*   mb          = new GigaMainBoard();
        Command*        openCmd     = new OpenCommand(mb);
        Command*        resetCmd    = new ResetCommand(mb);
        Command*        closeCmd    = new CloseCommand(mb);

        Box*            box = new Box();
        box->setOpenCommand(cmd);
        box->openBtnPressed();
    }
}

int main()
{
    test_1::assemble();
    test_2::assemble();

    return 0;
}
